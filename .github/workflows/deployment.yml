
name: Reusable CICD workflow

on:
  workflow_call: # This makes the workflow reusable
    inputs:
      service_name:
        required: true
        type: string
      config_file_path:
        required: true
        type: string
    secrets:     
      PAT_TOKEN:
        description: "API key for deployment"
      GCLOUD_SERVICE_KEY:
        description: "API key for deployment"            

env:  
  AWS_DEFAULT_REGION: ap-south-1
  IMAGE: asia-south1-docker.pkg.dev/ondc-ref-buyer-app/${{ inputs.service_name }}/global:v

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout client Node repo
        uses: actions/checkout@v3

      - name: Get current version
        id: get_version
        run: echo "CURRENT_VERSION=$(cat VERSION)"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Check if the latest commit is tagged
        id: check_tag
        run: |
          TAG=$(git describe --tags --exact-match HEAD || echo "none")
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV

      - name: Determine next version
        id: next_version
        run: |
          current_version=$(cat VERSION)
          echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV
          if [ "$TAG_NAME" == "none" ]; then
            echo "No tag is associated with the latest commit."
             current_version=$(cat VERSION)
            IFS='.' read -r -a version_parts <<< "$current_version"
            major="${version_parts[0]}"
            minor="${version_parts[1]}"
            patch="${version_parts[2]}"

            patch=$((patch + 1))

            next_version="$major.$minor.$patch"
            echo "Next version: $next_version"
            echo "VERSION=$next_version" >> $GITHUB_ENV
          else
            echo "The latest commit is tagged with: $TAG_NAME"
            echo "VERSION=$current_version" >> $GITHUB_ENV
          fi

      - name: Update version file
        run: |
          echo "$VERSION " > VERSION

      - name: Commit updated version file
        run: |
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add VERSION
            git commit -m "Update version to $VERSION"  || echo "No changes to commit"
            git push origin master || echo "No changes to commit"

      - name: Create Git tag
        run: |
            git tag "v$VERSION" || echo "Tag already exists"
            git push origin "v$VERSION" || echo "Tag already exists"

      - name: Checkout helm chart repo
        uses: actions/checkout@v3
        with:
          repository: dataorchestration/helm-ondc-buyer-app-chart
          token: ${{ secrets.PAT_TOKEN }}
          path: repo-helm-chart # This will clone Repo B into a folder named 'repo-helm-chart'

      - name: Fetch all branches
        run: |
          cd repo-helm-chart
          git fetch --all

      - name: Check out or create the test-cicd branch
        run: |
          cd repo-helm-chart
          git checkout test-cicd || git checkout -b test-cicd

      - name: Make Changes in repo-helm-chart
        run: |
          cd repo-helm-chart
          cat <<EOF > ${{ inputs.config_file_path }}
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: node-js-client-version-config
            namespace: ondc-prod-prod
          data:
            image_tag: ${{ env.IMAGE }}${{ env.VERSION }}
          EOF

      - name: Commit and Push changes to repo-helm-chart
        run: |
          cd repo-helm-chart
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update config from biap-client-node-js" || echo "No changes to commit"
          git push origin test-cicd || echo "No changes to push"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      - name: Authenticate to Google Cloud
        env:
          GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
        run: echo "${GCLOUD_SERVICE_KEY}" | gcloud auth activate-service-account --key-file=-

      - name: Set Google Cloud project
        run: gcloud config set project ondc-ref-buyer-app

      - name: Set docker for gcloud
        run: gcloud auth configure-docker asia-south1-docker.pkg.dev

      - name: build image
        run: docker build --platform linux/x86_64 -f Dockerfile -t  ${{ env.IMAGE }}${{ env.VERSION }} .

      - name: push image
        run: docker push  ${{ env.IMAGE }}${{ env.VERSION }}

      # - name: Echo clusters
      #   run:  gcloud container clusters list --region asia-south1

      # - name: Configure kubectl
      #   run: |
      #     gcloud container clusters get-credentials ondc-reference-apps-cluster-v1 --region asia-south1 --project ondc-gemini-pro-ex
      #     kubectl config set-context ondc-reference-apps-cluster-v1

      # - name: Apply updated config
      #   run: |
      #     cd repo-helm-chart
      #     cat services/config_maps/node-js-client-version-config.yaml
      #     kubectl apply -f services/config_maps/node-js-client-version-config.yaml

      # - name: Install Helm
      #   uses: azure/setup-helm@v3
      #   with:
      #     version: 'latest'

      # - name: Helm Upgrade
      #   run: |
      #     cd repo-helm-chart/services
      #     helm upgrade ondc-buyer-app-release . -f values.yaml --namespace ondc-prod-prod
